# app/api/routers/analytics.py
import boto3
import uuid
import json
from fastapi import APIRouter, Depends, HTTPException, status, Form, File, UploadFile
from sqlalchemy.orm import Session
import logging
from typing import Optional
from app import database, schemas
from app.api.deps import get_db, verify_api_key

logger = logging.getLogger(__name__)
router = APIRouter(prefix="/analytics", tags=["Analytics"],dependencies=[Depends(verify_api_key)])

# --- üîΩ 2. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ S3 üîΩ ---
# *** ‡∏à‡∏∞‡∏¢‡πâ‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå config ‡∏´‡∏£‡∏∑‡∏≠ .env ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï ***
S3_BUCKET_NAME = "carparkinglopayahc" # ‚¨ÖÔ∏è‚¨ÖÔ∏è‚¨ÖÔ∏è **‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠ BUCKET ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì**
S3_REGION = "ap-southeast-2" # ‚¨ÖÔ∏è **‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô REGION ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏™‡∏¥‡∏á‡∏Ñ‡πÇ‡∏õ‡∏£‡πå)**
# ‡∏™‡∏£‡πâ‡∏≤‡∏á S3 client ‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
s3_client = boto3.client("s3", region_name=S3_REGION)

@router.post("/", status_code=status.HTTP_201_CREATED, response_model=schemas.InferenceResultResponse)
async def create_inference_result(
    # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö JSON body (data: ...) ‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö Form data
    data: str = Form(..., description="A JSON string representing the analytics data."),
    image: Optional[UploadFile] = File(None, description="An optional image file for parking violations."),
    db: Session = Depends(get_db)
):
    logger.info("Received analytics data via multipart/form-data")
    image_url = None # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö URL ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û

    try:
        # ‡πÅ‡∏õ‡∏•‡∏á JSON string ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å Form ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô Pydantic object
        payload = schemas.AnalyticsDataIn.model_validate_json(data)
        
        db_item, message = None, "No valid analytics data provided"

        # --- ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á Parking Violation ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏© ---
        if payload.parking_violation:
            logger.info("Processing parking violation...")
            
            # 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡πà‡∏á‡∏°‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö violation ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if image:
                try:
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
                    unique_filename = f"violations/{uuid.uuid4()}.jpg"

                    # ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á S3
                    s3_client.upload_fileobj(
                        image.file,
                        S3_BUCKET_NAME,
                        unique_filename,
                        ExtraArgs={'ContentType': image.content_type}
                    )
                    
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ‡πÅ‡∏ö‡∏ö‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞
                    image_url = f"https://{S3_BUCKET_NAME}.s3.{S3_REGION}.amazonaws.com/{unique_filename}"
                    logger.info(f"Image uploaded to S3. URL: {image_url}")

                except Exception as s3_error:
                    logger.error(f"Failed to upload image to S3: {s3_error}")
                    # ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ URL ‡∏£‡∏π‡∏õ
                    # ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡πÉ‡∏´‡πâ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÑ‡∏õ‡πÄ‡∏•‡∏¢‡∏Å‡πá‡πÑ‡∏î‡πâ
                    # raise HTTPException(status_code=500, detail="Image upload failed.")

            # 5. ‡∏™‡∏£‡πâ‡∏≤‡∏á DB Object ‡πÅ‡∏•‡∏∞ **‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å image_url ‡πÅ‡∏ó‡∏ô image_base64**
            # **‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:** ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ database.py ‡πÅ‡∏•‡∏∞ schemas.py ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
            # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å image_base64 ‡πÄ‡∏õ‡πá‡∏ô image_url (‡∏ä‡∏ô‡∏¥‡∏î String/Text) ‡πÅ‡∏•‡πâ‡∏ß
            violation_dict = payload.parking_violation.model_dump()
            violation_dict['image_url'] = image_url # ‡πÄ‡∏û‡∏¥‡πà‡∏° URL ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô dictionary
            
            db_item = database.DBParkingViolation(**violation_dict)
            db.add(db_item)
            message = "Parking violation data received."

        # --- ‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ---
        elif payload.table_occupancy:
            db_item = database.DBTableOccupancy(**payload.table_occupancy.model_dump())
            db.add(db_item)
            message = "Table occupancy data received."
        elif payload.chilled_basket_alert:
            db_item = database.DBChilledBasketAlert(**payload.chilled_basket_alert.model_dump())
            db.add(db_item)
            message = "Chilled basket alert data received."
        else:
            raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="No valid analytics data provided.")

        db.commit()
        db.refresh(db_item)
        return {"message": message, "id": db_item.id}

    except Exception as e:
        db.rollback()
        logging.exception(f"Error processing analytics data:")
        logger.info(f"\n--- DEBUG ERROR START ---")
        logger.info(f"Type of error: {type(e)}")
        logger.info(f"Error details: {e}")
        import traceback
        traceback.print_exc()
        logger.info(f"--- DEBUG ERROR END ---\n")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,detail=f"Failed to process inference result: {e}")
    
@router.patch("/{record_id}", status_code=status.HTTP_200_OK, summary="Update Parking Violation Exit Time")
async def update_violation_exit_time(
    record_id: int,
    data: schemas.ParkingViolationUpdate, # <-- ‡πÉ‡∏ä‡πâ Schema ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å schemas.py
    db: Session = Depends(get_db)
):
    """
    Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï" record ‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏ó‡∏≥‡∏ú‡∏¥‡∏î‡∏Å‡∏é‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
    ‡πÇ‡∏î‡∏¢‡∏à‡∏∞‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≠‡∏î‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    """
    logger.info(f"Received request to update record ID: {record_id}")
    
    # 1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ record ‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≤‡∏Å ID
    db_item = db.query(database.DBParkingViolation).filter(database.DBParkingViolation.id == record_id).first()
    
    # 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏à‡∏≠ record ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if not db_item:
        logger.warning(f"Record with ID {record_id} not found for update.")
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f"Record with id {record_id} not found")

    # 3. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    db_item.exit_time = data.exit_time
    db_item.duration_minutes = data.duration_minutes
    db.commit()
    
    logger.info(f"Record {record_id} updated successfully.")
    return {"message": f"Record {record_id} updated successfully."}  