# app/api/routers/frame_router.py

# --- üîΩ 1. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Import ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô üîΩ ---
from fastapi import (
    APIRouter, WebSocket, WebSocketDisconnect, Request, 
    HTTPException, Response, status
)
from typing import Dict, Set
import asyncio
import logging

# --- üîΩ 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á Logger ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ üîΩ ---
logger = logging.getLogger(__name__)

router = APIRouter(tags=["Frames"])

# clients per camera_id
_clients: Dict[str, Set[WebSocket]] = {}
_clients_lock = asyncio.Lock()

# --- üîΩ 3. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô ws_frames ‡πÉ‡∏´‡πâ "‡∏´‡∏∏‡πâ‡∏°‡πÄ‡∏Å‡∏£‡∏≤‡∏∞" üîΩ ---
@router.websocket("/ws/ai-frames/{camera_id}")
async def ws_frames(websocket: WebSocket, camera_id: str):
    await websocket.accept()
    async with _clients_lock:
        _clients.setdefault(camera_id, set()).add(websocket)
    
    logger.info(f"Client connected for camera_id: {camera_id}")
    
    try:
        # Keep connection alive
        while True:
            # ‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (ping/pong) ‡∏à‡∏≤‡∏Å client ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà
            # ‡∏ñ‡πâ‡∏≤ client ‡∏´‡∏•‡∏∏‡∏î‡πÑ‡∏õ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ö‡∏≠‡∏Å‡∏•‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô ‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡πá‡∏ö‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå)
            # await websocket.receive_text() ‡∏à‡∏∞ raise WebSocketDisconnect
            await websocket.receive_text()

    except WebSocketDisconnect:
        # logger.info(f"Client disconnected gracefully for camera_id: {camera_id}")
        pass
    except Exception as e:
        # **‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î**
        # ‡∏î‡∏±‡∏Å‡∏à‡∏±‡∏ö Error ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÅ‡∏•‡πâ‡∏ß log ‡∏°‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
        # logger.error(f"An unexpected error occurred in WebSocket for {camera_id}: {e}", exc_info=True)
        pass
    finally:
        # ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏≠‡∏∞‡πÑ‡∏£‡∏Ç‡∏∂‡πâ‡∏ô ‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏°‡∏≠ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        async with _clients_lock:
            if camera_id in _clients and websocket in _clients[camera_id]:
                _clients[camera_id].remove(websocket)
        # logger.info(f"Cleaned up client for camera_id: {camera_id}")


# --- üîΩ 4. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô _broadcast_bytes ‡πÉ‡∏´‡πâ‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå üîΩ ---
async def _broadcast_bytes(camera_id: str, b: bytes):
    """‡∏™‡πà‡∏á binary JPEG ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ó‡∏∏‡∏Å client ‡∏Ç‡∏≠‡∏á camera_id"""
    async with _clients_lock:
        clients_to_send = list(_clients.get(camera_id, set()))

    if not clients_to_send:
        return

    send_tasks = [ws.send_bytes(b) for ws in clients_to_send]
    results = await asyncio.gather(*send_tasks, return_exceptions=True)
    
    for ws, result in zip(clients_to_send, results):
        if isinstance(result, Exception):
            logger.error(f"Error broadcasting to client for {camera_id}: {result}. Removing client.")
            async with _clients_lock:
                if camera_id in _clients and ws in _clients[camera_id]:
                    _clients[camera_id].remove(ws)


# --- üîΩ 5. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô publish_frame ‡πÉ‡∏´‡πâ‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå üîΩ ---
@router.post("/frames/{camera_id}")
async def publish_frame(camera_id: str, request: Request):
    """
    ‡∏£‡∏±‡∏ö POST image/jpeg binary ‡∏à‡∏≤‡∏Å camera worker
    """
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö content-type
    ct = request.headers.get("content-type", "")
    if "image/jpeg" not in ct and "image/jpg" not in ct:
        raise HTTPException(status_code=400, detail=f"Unsupported content-type: {ct}")
    
    # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û
    b = await request.body()
    if not b:
        raise HTTPException(status_code=400, detail="Empty body")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á task ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà block AI worker
    asyncio.create_task(_broadcast_bytes(camera_id, b))
    
    # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ 204 No Content ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏Å AI worker ‡∏ß‡πà‡∏≤‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö‡πÅ‡∏•‡πâ‡∏ß
    return Response(status_code=status.HTTP_204_NO_CONTENT)